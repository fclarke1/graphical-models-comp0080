import numpy as np
import math

b = 1 #set beta

#initialize the lattice containing random values of q(x)
lattice = np.random.rand(10, 10) #set random initial values for marginal dist
#print(lattice)

def neighbours(lattice,x,y):
    '''
    Function that returns neighbour values in a list of given point on lattice
    Input:
    lattice (array) : mxn array
    x (int) : x position on lattice < m
    y (int) : y position on lattice < n
    Output:
    neighbours (list) : list of values of the neighbours on the lattice
    '''
    m = lattice.shape[0]
    n = lattice.shape[1]
    neighbours = []

    if x > 0:
        neighbours.append(lattice[x-1,y])
    if x < (m - 1):
        neighbours.append(lattice[x+1,y])
    if y > 0:
        neighbours.append(lattice[x,y-1])
    if y < (n - 1):
        neighbours.append(lattice[x,y+1])
    return neighbours

#define q_1
def q_1(lattice, x, y):
    q_1 = math.exp(b*sum(neighbours(lattice, x, y)))
    return q_1

#define q_0
def q_0(lattice, x, y):
    n_0 = [(1 - n) for n in neighbours(lattice, x, y)]
    q_0 = math.exp(b*sum(n_0))
    return q_0

#iterate through the lattice working through each node xk updating q(xk)
for iter in range(1000):
    for y in range(10):
        for x in range(10):
            lattice[x,y] = q_1(lattice,x,y)/(q_1(lattice,x,y) + q_0(lattice,x,y))

#joint dist
dist_09 = np.array([1-lattice[0,9], lattice[0,9]])
dist_99 = np.array([1-lattice[9,9], lattice[9,9]])
joint_dist = np.array([[dist_09[0]*dist_99[0], dist_09[0]*dist_99[1]], [dist_09[1]*dist_99[0], dist_09[1]*dist_99[1]]]) #find the joint dist of points 9 and 99 
print(joint_dist)
